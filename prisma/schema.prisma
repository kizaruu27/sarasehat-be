generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id             Int           @id @default(autoincrement())
  itemName       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  itemCode       String        @unique
  minStock       Int
  maxStock       Int
  currentStock   Int
  wacc           Float
  sellingPrice   Float
  itemCategoryId Int
  itemTypeId     Int?
  supplierId     Int
  lastStock      Int
  infoStock      InfoStock[]
  cart Cart[]
  itemCategory   ItemCategory  @relation(fields: [itemCategoryId], references: [id])
  itemType       itemType?     @relation(fields: [itemTypeId], references: [id])
  supplier       Supplier      @relation(fields: [supplierId], references: [id])
}

model InfoStock {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  itemId          Int?
  startStock      Int
  endStock        Int
  startAmmount    Int
  stockIn         Int
  stockInAmmount  Int
  stockOut        Int
  stockOutAmmount Int
  stockTotal      Int
  ammountTotal    Int
  item            Item?    @relation(fields: [itemId], references: [id])
}

model ItemCategory {
  id       Int    @id @default(autoincrement())
  category String
  items    Item[]
}

model itemType {
  id    Int    @id @default(autoincrement())
  type  String
  items Item[]
}

model Supplier {
  id           Int    @id @default(autoincrement())
  supplierName String
  items        Item[]
}

model Transaction {
  id            String            @id @default(uuid())
  totalPrice    Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  paymentTypeId Int
  statusId      Int
  carts Cart[]
  payment       PaymentType       @relation(fields: [paymentTypeId], references: [id])
  status        TransactionStatus @relation(fields: [statusId], references: [id])
}

model Cart {
  id Int @id @default(autoincrement())
  qty Int
  statusId Int
  itemId Int?
  transactionId String?
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  status TransactionStatus @relation(fields: [statusId], references: [id])
  item Item? @relation(fields: [itemId], references: [id])
}

model PaymentType {
  id           Int           @id @default(autoincrement())
  type         String
  transactions Transaction[]
}

model TransactionStatus {
  id           Int           @id @default(autoincrement())
  status       String
  transactions Transaction[]
  carts  Cart[]
}
